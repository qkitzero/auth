// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/api/keycloak_client.go
//
// Generated by this command:
//
//	mockgen -source=internal/infrastructure/api/keycloak_client.go -destination=mocks/infrastructure/api/mock_keycloak_client.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	api "github.com/qkitzero/auth/internal/infrastructure/api"
	gomock "go.uber.org/mock/gomock"
)

// MockKeycloakClient is a mock of KeycloakClient interface.
type MockKeycloakClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeycloakClientMockRecorder
	isgomock struct{}
}

// MockKeycloakClientMockRecorder is the mock recorder for MockKeycloakClient.
type MockKeycloakClientMockRecorder struct {
	mock *MockKeycloakClient
}

// NewMockKeycloakClient creates a new mock instance.
func NewMockKeycloakClient(ctrl *gomock.Controller) *MockKeycloakClient {
	mock := &MockKeycloakClient{ctrl: ctrl}
	mock.recorder = &MockKeycloakClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeycloakClient) EXPECT() *MockKeycloakClientMockRecorder {
	return m.recorder
}

// ExchangeCodeForToken mocks base method.
func (m *MockKeycloakClient) ExchangeCodeForToken(code string) (*api.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeCodeForToken", code)
	ret0, _ := ret[0].(*api.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeCodeForToken indicates an expected call of ExchangeCodeForToken.
func (mr *MockKeycloakClientMockRecorder) ExchangeCodeForToken(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeCodeForToken", reflect.TypeOf((*MockKeycloakClient)(nil).ExchangeCodeForToken), code)
}

// RefreshToken mocks base method.
func (m *MockKeycloakClient) RefreshToken(refreshToken string) (*api.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", refreshToken)
	ret0, _ := ret[0].(*api.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockKeycloakClientMockRecorder) RefreshToken(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockKeycloakClient)(nil).RefreshToken), refreshToken)
}

// RevokeToken mocks base method.
func (m *MockKeycloakClient) RevokeToken(refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeToken", refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeToken indicates an expected call of RevokeToken.
func (mr *MockKeycloakClientMockRecorder) RevokeToken(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeToken", reflect.TypeOf((*MockKeycloakClient)(nil).RevokeToken), refreshToken)
}

// VerifyToken mocks base method.
func (m *MockKeycloakClient) VerifyToken(accessToken string) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", accessToken)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockKeycloakClientMockRecorder) VerifyToken(accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockKeycloakClient)(nil).VerifyToken), accessToken)
}
